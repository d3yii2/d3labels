<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3labels\models\base;

use Yii;
use d3system\yii2\validators\D3TrimValidator;
use d3yii2\d3labels\models\D3lLabel;
use d3yii2\d3labels\models\D3lLabelHistory;
use d3yii2\d3labels\models\D3lTimeBomb;
use d3yii2\d3labels\models\SysModels;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the base-model class for table "d3l_definition".
 *
 * @property integer $id
 * @property integer $sys_company_id
 * @property string $code
 * @property integer $model_id
 * @property string $label
 * @property string $collor
 * @property string $icon
 * @property string $action_class
 * @property string $action_method
 *
 * @property D3lLabelHistory[] $d3lLabelHistories
 * @property D3lLabel[] $d3lLabels
 * @property D3lTimeBomb[] $d3lTimeBombs
 * @property SysModels $model
 * @property string $aliasModel
 */
abstract class D3lDefinition extends ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'd3l_definition';
    }

    /**
     * @inheritdoc
     */
    public function rules(): array
    {
        return [
            'trimNumbers' => [['id','sys_company_id','model_id'],D3TrimValidator::class, 'trimOnlyStringValues' => true],
            'required' => [['model_id'], 'required'],
            'tinyint Unsigned' => [['model_id'],'integer' ,'min' => 0 ,'max' => 255],
            'smallint Unsigned' => [['id','sys_company_id'],'integer' ,'min' => 0 ,'max' => 65535],
            [['sys_company_id', 'code', 'label', 'collor', 'icon', 'action_class', 'action_method'], 'default', 'value' => null],
            [['action_class'], 'string'],
            [['code', 'label', 'icon'], 'string', 'max' => 20],
            [['collor'], 'string', 'max' => 10],
            [['action_method'], 'string', 'max' => 256],
            [['model_id'], 'exist', 'skipOnError' => true, 'targetClass' => SysModels::class, 'targetAttribute' => ['model_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels(): array
    {
        return [
            'id' => Yii::t('d3labels', 'ID'),
            'sys_company_id' => Yii::t('d3labels', 'Sys Company ID'),
            'code' => Yii::t('d3labels', 'Code'),
            'model_id' => Yii::t('d3labels', 'Model'),
            'label' => Yii::t('d3labels', 'Label'),
            'collor' => Yii::t('d3labels', 'Collor'),
            'icon' => Yii::t('d3labels', 'Icon'),
            'action_class' => Yii::t('d3labels', 'Action Class'),
            'action_method' => Yii::t('d3labels', 'Action Method'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints(): array
    {
        return array_merge(parent::attributeHints(), [
            'code' => Yii::t('d3labels', 'Code'),
            'model_id' => Yii::t('d3labels', 'Model'),
            'label' => Yii::t('d3labels', 'Label'),
            'collor' => Yii::t('d3labels', 'Collor'),
            'icon' => Yii::t('d3labels', 'Icon'),
            'action_class' => Yii::t('d3labels', 'Action Class'),
            'action_method' => Yii::t('d3labels', 'Action Method'),
        ]);
    }

    /**
     * @return ActiveQuery
     */
    public function getD3lLabelHistories(): ActiveQuery
    {
        return $this
            ->hasMany(D3lLabelHistory::class, ['definition_id' => 'id'])
            ->inverseOf('definition');
    }

    /**
     * @return ActiveQuery
     */
    public function getD3lLabels(): ActiveQuery
    {
        return $this
            ->hasMany(D3lLabel::class, ['definition_id' => 'id'])
            ->inverseOf('definition');
    }

    /**
     * @return ActiveQuery
     */
    public function getD3lTimeBombs(): ActiveQuery
    {
        return $this
            ->hasMany(D3lTimeBomb::class, ['definition_id' => 'id'])
            ->inverseOf('definition');
    }

    /**
     * @return ActiveQuery
     */
    public function getModel(): ActiveQuery
    {
        return $this
            ->hasOne(SysModels::class, ['id' => 'model_id']);
            //->inverseOf('d3lDefinitions');
    }

}
