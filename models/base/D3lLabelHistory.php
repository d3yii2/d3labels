<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3labels\models\base;

use Yii;
use d3system\behaviors\D3DateTimeBehavior;

/**
 * This is the base-model class for table "d3l_label_history".
 *
 * @property integer $id
 * @property integer $definition_id
 * @property integer $model_record_id
 * @property string $action
 * @property integer $model_id
 * @property string $time
 * @property integer $user_id
 * @property string $notes
 *
 * @property \d3yii2\d3labels\models\D3lDefinition $definition
 * @property string $aliasModel
 */
abstract class D3lLabelHistory extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    public const ACTION_ADDED = 'Added';
    public const ACTION_DROPED = 'Droped';
    public const ACTION_CANCELED = 'Canceled';
    public const ACTION_EXPLODED = 'Exploded';
    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'd3l_label_history';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = [
        ];
        $behaviors = array_merge(
            $behaviors,
            D3DateTimeBehavior::getConfig(['time'])
        );
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'required' => [['definition_id', 'model_record_id', 'action', 'model_id'], 'required'],
            'enum-action' => ['action', 'in', 'range' => [
                    self::ACTION_ADDED,
                    self::ACTION_DROPED,
                    self::ACTION_CANCELED,
                    self::ACTION_EXPLODED,
                ]
            ],
            'smallint Unsigned' => [['definition_id'],'integer' ,'min' => 0 ,'max' => 65535],
            'integer Unsigned' => [['id','model_record_id','model_id'],'integer' ,'min' => 0 ,'max' => 4294967295],
            'integer Signed' => [['user_id'],'integer' ,'min' => -2147483648 ,'max' => 2147483647],
            [['action'], 'string'],
            [['time'], 'safe'],
            [['notes'], 'string', 'max' => 255],
            [['definition_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3labels\models\D3lDefinition::className(), 'targetAttribute' => ['definition_id' => 'id']],
            'D3DateTimeBehavior' => [['time_local'],'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3labels', 'ID'),
            'definition_id' => Yii::t('d3labels', 'Definition ID'),
            'model_record_id' => Yii::t('d3labels', 'Model Record ID'),
            'action' => Yii::t('d3labels', 'Action'),
            'model_id' => Yii::t('d3labels', 'Model ID'),
            'time' => Yii::t('d3labels', 'Time'),
            'user_id' => Yii::t('d3labels', 'User ID'),
            'notes' => Yii::t('d3labels', 'Notes'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints(): array
    {
        return array_merge(parent::attributeHints(), [
            'definition_id' => Yii::t('d3labels', 'Definition'),
            'model_record_id' => Yii::t('d3labels', 'Model record'),
            'action' => Yii::t('d3labels', 'Action'),
            'model_id' => Yii::t('d3labels', 'Label/Time Bomb record'),
            'time' => Yii::t('d3labels', 'Time'),
            'user_id' => Yii::t('d3labels', 'User'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDefinition()
    {
        return $this->hasOne(\d3yii2\d3labels\models\D3lDefinition::className(), ['id' => 'definition_id'])->inverseOf('d3lLabelHistories');
    }




    /**
     * get column action enum value label
     * @param string $value
     * @return string
     */
    public static function getActionValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsAction();
        return $labels[$value] ?? $value;
    }

    /**
     * column action ENUM value labels
     * @return string[]
     */
    public static function optsAction(): array
    {
        return [
            self::ACTION_ADDED => Yii::t('d3labels', 'Added'),
            self::ACTION_DROPED => Yii::t('d3labels', 'Droped'),
            self::ACTION_CANCELED => Yii::t('d3labels', 'Canceled'),
            self::ACTION_EXPLODED => Yii::t('d3labels', 'Exploded'),
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isActionAdded(): bool
    {
        return $this->action === self::ACTION_ADDED;
    }

     /**
     * @return void
     */
    public function setActionAdded(): void
    {
        $this->action = self::ACTION_ADDED;
    }
    /**
     * @return bool
     */
    public function isActionDroped(): bool
    {
        return $this->action === self::ACTION_DROPED;
    }

     /**
     * @return void
     */
    public function setActionDroped(): void
    {
        $this->action = self::ACTION_DROPED;
    }
    /**
     * @return bool
     */
    public function isActionCanceled(): bool
    {
        return $this->action === self::ACTION_CANCELED;
    }

     /**
     * @return void
     */
    public function setActionCanceled(): void
    {
        $this->action = self::ACTION_CANCELED;
    }
    /**
     * @return bool
     */
    public function isActionExploded(): bool
    {
        return $this->action === self::ACTION_EXPLODED;
    }

     /**
     * @return void
     */
    public function setActionExploded(): void
    {
        $this->action = self::ACTION_EXPLODED;
    }
}
