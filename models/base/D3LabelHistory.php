<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3labels\models\base;

use Yii;
use yii\db\Exception;

/**
 * This is the base-model class for table "d3_label_history".
 *
 * @property string $id
 * @property integer $definition_id
 * @property string $model_record_id
 * @property string $action
 * @property string $model_id
 * @property string $time
 * @property integer $user_id
 *
 * @property \d3yii2\d3labels\models\D3lDefinition $definition
 * @property string $aliasModel
 */
abstract class D3LabelHistory extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const ACTION_ADDED = 'Added';
    const ACTION_DROPED = 'Droped';
    const ACTION_CANCELED = 'Canceled';
    const ACTION_EXPLODED = 'Exploded';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'd3_label_history';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['definition_id', 'model_record_id', 'action', 'model_id'], 'required'],
            [['definition_id', 'model_record_id', 'model_id', 'user_id'], 'integer'],
            [['action'], 'string'],
            [['time'], 'safe'],
            [['definition_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3labels\models\D3lDefinition::className(), 'targetAttribute' => ['definition_id' => 'id']],
            ['action', 'in', 'range' => [
                    self::ACTION_ADDED,
                    self::ACTION_DROPED,
                    self::ACTION_CANCELED,
                    self::ACTION_EXPLODED,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3labels', 'ID'),
            'definition_id' => Yii::t('d3labels', 'Definition ID'),
            'model_record_id' => Yii::t('d3labels', 'Model Record ID'),
            'action' => Yii::t('d3labels', 'Action'),
            'model_id' => Yii::t('d3labels', 'Model ID'),
            'time' => Yii::t('d3labels', 'Time'),
            'user_id' => Yii::t('d3labels', 'User ID'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'definition_id' => Yii::t('d3labels', 'Definition'),
            'model_record_id' => Yii::t('d3labels', 'Model record'),
            'action' => Yii::t('d3labels', 'Action'),
            'model_id' => Yii::t('d3labels', 'Label/Time Bomb record'),
            'time' => Yii::t('d3labels', 'Time'),
            'user_id' => Yii::t('d3labels', 'User'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDefinition()
    {
        return $this->hasOne(\d3yii2\d3labels\models\D3lDefinition::className(), ['id' => 'definition_id']);
    }





    /**
     * get column action enum value label
     * @param string $value
     * @return string
     */
    public static function getActionValueLabel($value){
        $labels = self::optsAction();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column action ENUM value labels
     * @return array
     */
    public static function optsAction()
    {
        return [
            self::ACTION_ADDED => Yii::t('d3labels', self::ACTION_ADDED),
            self::ACTION_DROPED => Yii::t('d3labels', self::ACTION_DROPED),
            self::ACTION_CANCELED => Yii::t('d3labels', self::ACTION_CANCELED),
            self::ACTION_EXPLODED => Yii::t('d3labels', self::ACTION_EXPLODED),
        ];
    }
    public function saveOrException($runValidation = true, $attributeNames = null)
    {
        if(!parent::save($runValidation, $attributeNames)){
            throw new Exception(json_encode($this->getErrors()));
        }
    }
}
